/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.acmepetsupplies.controller;

import com.acmepetsupplies.model.CategoriesResponse;
import com.acmepetsupplies.model.Error;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-18T20:17:33.879399+01:00[Europe/London]")
@Validated
@Tag(name = "Categories", description = "A category is a class of products with common characteristics")
public interface CategoriesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /v1/catalog/categories : List all categories
     * List all categories.
     *
     * @return OK (status code 200)
     *         or Not authorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Acceptable (status code 406)
     *         or 415 Unsupported Media Type (status code 415)
     *         or 429 Too Many Requests (status code 429)
     *         or 500 Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listCategories",
        summary = "List all categories",
        description = "List all categories.",
        tags = { "Categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = CategoriesResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authorized", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbidden", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "406", description = "Not Acceptable", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "415", description = "415 Unsupported Media Type", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "429", description = "429 Too Many Requests", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "500 Internal Server Error", content = {
                @Content(mediaType = "application/vnd.api+json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "OAuth2", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/catalog/categories",
        produces = { "application/vnd.api+json" }
    )
    default ResponseEntity<CategoriesResponse> listCategories(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/vnd.api+json"))) {
                    String exampleString = "Custom MIME type example not yet supported: application/vnd.api+json";
                    ApiUtil.setExampleResponse(request, "application/vnd.api+json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
