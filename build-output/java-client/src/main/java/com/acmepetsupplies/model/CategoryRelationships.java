/*
 * Product Catalog API
 * The Product Catalog API enables customers browse Acme Pet Supplies great range of pet products and their product reviews. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: john.smith@acme-pet-supplies.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.acmepetsupplies.model;

import java.util.Objects;
import java.util.Arrays;
import com.acmepetsupplies.model.CategoryRelationshipsContainsProducts;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.acmepetsupplies.client.JSON;

/**
 * CategoryRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T02:25:23.560502Z[Europe/London]")
public class CategoryRelationships {
  public static final String SERIALIZED_NAME_CONTAINS_PRODUCTS = "contains_products";
  @SerializedName(SERIALIZED_NAME_CONTAINS_PRODUCTS)
  private CategoryRelationshipsContainsProducts containsProducts;

  public CategoryRelationships() {
  }

  public CategoryRelationships containsProducts(CategoryRelationshipsContainsProducts containsProducts) {
    
    this.containsProducts = containsProducts;
    return this;
  }

   /**
   * Get containsProducts
   * @return containsProducts
  **/
  @javax.annotation.Nullable
  public CategoryRelationshipsContainsProducts getContainsProducts() {
    return containsProducts;
  }


  public void setContainsProducts(CategoryRelationshipsContainsProducts containsProducts) {
    this.containsProducts = containsProducts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CategoryRelationships categoryRelationships = (CategoryRelationships) o;
    return Objects.equals(this.containsProducts, categoryRelationships.containsProducts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containsProducts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CategoryRelationships {\n");
    sb.append("    containsProducts: ").append(toIndentedString(containsProducts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contains_products");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CategoryRelationships
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CategoryRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CategoryRelationships is not found in the empty JSON string", CategoryRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CategoryRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CategoryRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contains_products`
      if (jsonObj.get("contains_products") != null && !jsonObj.get("contains_products").isJsonNull()) {
        CategoryRelationshipsContainsProducts.validateJsonElement(jsonObj.get("contains_products"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CategoryRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CategoryRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CategoryRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CategoryRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<CategoryRelationships>() {
           @Override
           public void write(JsonWriter out, CategoryRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CategoryRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CategoryRelationships given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CategoryRelationships
  * @throws IOException if the JSON string is invalid with respect to CategoryRelationships
  */
  public static CategoryRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CategoryRelationships.class);
  }

 /**
  * Convert an instance of CategoryRelationships to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

