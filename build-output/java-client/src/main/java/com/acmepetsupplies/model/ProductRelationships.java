/*
 * Product Catalog API
 * The Product Catalog API enables customers browse Acme Pet Supplies great range of pet products and their product reviews. 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: john.smith@acme-pet-supplies.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.acmepetsupplies.model;

import java.util.Objects;
import java.util.Arrays;
import com.acmepetsupplies.model.ProductRelationshipsHasReviews;
import com.acmepetsupplies.model.ProductRelationshipsInCategories;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.acmepetsupplies.client.JSON;

/**
 * ProductRelationships
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-11-14T02:25:23.560502Z[Europe/London]")
public class ProductRelationships {
  public static final String SERIALIZED_NAME_IN_CATEGORIES = "in_categories";
  @SerializedName(SERIALIZED_NAME_IN_CATEGORIES)
  private ProductRelationshipsInCategories inCategories;

  public static final String SERIALIZED_NAME_HAS_REVIEWS = "has_reviews";
  @SerializedName(SERIALIZED_NAME_HAS_REVIEWS)
  private ProductRelationshipsHasReviews hasReviews;

  public ProductRelationships() {
  }

  public ProductRelationships inCategories(ProductRelationshipsInCategories inCategories) {
    
    this.inCategories = inCategories;
    return this;
  }

   /**
   * Get inCategories
   * @return inCategories
  **/
  @javax.annotation.Nullable
  public ProductRelationshipsInCategories getInCategories() {
    return inCategories;
  }


  public void setInCategories(ProductRelationshipsInCategories inCategories) {
    this.inCategories = inCategories;
  }


  public ProductRelationships hasReviews(ProductRelationshipsHasReviews hasReviews) {
    
    this.hasReviews = hasReviews;
    return this;
  }

   /**
   * Get hasReviews
   * @return hasReviews
  **/
  @javax.annotation.Nullable
  public ProductRelationshipsHasReviews getHasReviews() {
    return hasReviews;
  }


  public void setHasReviews(ProductRelationshipsHasReviews hasReviews) {
    this.hasReviews = hasReviews;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductRelationships productRelationships = (ProductRelationships) o;
    return Objects.equals(this.inCategories, productRelationships.inCategories) &&
        Objects.equals(this.hasReviews, productRelationships.hasReviews);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inCategories, hasReviews);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductRelationships {\n");
    sb.append("    inCategories: ").append(toIndentedString(inCategories)).append("\n");
    sb.append("    hasReviews: ").append(toIndentedString(hasReviews)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("in_categories");
    openapiFields.add("has_reviews");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProductRelationships
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductRelationships.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductRelationships is not found in the empty JSON string", ProductRelationships.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ProductRelationships.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductRelationships` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `in_categories`
      if (jsonObj.get("in_categories") != null && !jsonObj.get("in_categories").isJsonNull()) {
        ProductRelationshipsInCategories.validateJsonElement(jsonObj.get("in_categories"));
      }
      // validate the optional field `has_reviews`
      if (jsonObj.get("has_reviews") != null && !jsonObj.get("has_reviews").isJsonNull()) {
        ProductRelationshipsHasReviews.validateJsonElement(jsonObj.get("has_reviews"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductRelationships.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductRelationships' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductRelationships> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductRelationships.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductRelationships>() {
           @Override
           public void write(JsonWriter out, ProductRelationships value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductRelationships read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductRelationships given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductRelationships
  * @throws IOException if the JSON string is invalid with respect to ProductRelationships
  */
  public static ProductRelationships fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductRelationships.class);
  }

 /**
  * Convert an instance of ProductRelationships to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

