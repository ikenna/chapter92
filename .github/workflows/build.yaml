name: Mainline merge

on:
  push:
    branches:
      - main
env:
  GITHUB_RUN_NUMBER: ${{ github.run_number }}
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      LATEST_ARTIFACT_VERSION: ${{ steps.artifact-version.outputs.ARTIFACT_VERSION }}
    steps:
      - name: Build - Checkout
        uses: actions/checkout@v3
      - name: Build - Start background services
        run: |
          docker compose -f chapter9/compose.yaml up -d
      - name: Build - Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Build - Check Java version
        run: |
          mvn -version
          echo $JAVA_HOME
      - name: Build - Create application jar
        run: |
          cd chapter8
          ./run_app_build.sh
      - name: Build - Log in to the GitHub Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build - Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
         context: .
         push: true
         tags: ghcr.io/ikenna/products-api-service3:${{ github.run_number }}
         file: chapter8/Dockerfile
      - name: Build - Create output directory for API artifacts
        run: mkdir build-output
      - name: Build - Bundle API definition file
        run: |
          cd chapter8/apis/product-catalog-api
          npx @redocly/cli bundle openapi.yaml --output api.bundled.yaml
          mv api.bundled.yaml ../../../build-output/api.bundled.yaml
      - name: Build - Filter out internal endpoints
        run: |
          npx openapi-filter --flags x-internal --verbose -- build-output/api.bundled.yaml build-output/api.yaml
      - name: Build - Remove unused components
        run: |
          npx openapi-format build-output/api.yaml --filterFile chapter9/unused-components-filter.yaml  --sortFile chapter9/sort.json   --output build-output/api.yaml
      - name: Build - Run API linting
        run: |
          npx @stoplight/spectral-cli lint build-output/api.yaml --ruleset chapter8/apis/rulesets/json-api.ruleset.yaml
      - name: Build - Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-after-linting
          path: |
            build-output
      - name: Build - Publish updated API definition to registry
        run: |
          curl -v -X POST 'http://localhost:9090/apis/registry/v2/groups/acmeapis/artifacts?ifExists=UPDATE'    \
           --header 'Content-Type: application/x-yaml'     \
           --header 'X-Registry-ArtifactId: productsapi'    \
           --header 'X-Registry-ArtifactType: OPENAPI'     \
           --data-binary "@build-output/api.yaml"    \
           --output created-artifact.json   \
           --fail-with-body
      - name: Build - Get created artifact version
        id: artifact-version
        run: |
          echo "ARTIFACT_VERSION=$(cat created-artifact.json | jq -j '.version')"  >> $GITHUB_OUTPUT
      - name: Build - Generate Java SDK
        run: |
          npm install -g @openapitools/openapi-generator-cli
          openapi-generator-cli generate \
          --input-spec build-output/api.yaml  \
          --generator-name java \
          --output build-output/java-client \
          --template-dir chapter8/java-template  \
          --library okhttp-gson \
          --additional-properties=invokerPackage=com.acmepetsupplies.client,apiPackage=com.acmepetsupplies.api,modelPackage=com.acmepetsupplies.model,groupId=com.acmepetsupplies,artifactId=acmepetsupplies-java-client,artifactVersion=1.0.0-SNAPSHOT
      - name: Build - Publish SDK to GitHub Packages #TODO: ensure you uncomment distribution-management from chapter8/java-template/libraries/okhttp-gson/pom.mustache
        run: |
          cd build-output/java-client
          mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  deploy-and-test:
#    name: Deploy and test
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
      - name: Where am I
        run: |
          ls -la
          pwd
      - name: Deploy-and-Test - Install Kong Deck
        run: |
          curl -sL https://github.com/kong/deck/releases/download/v1.29.2/deck_1.29.2_linux_amd64.tar.gz -o deck.tar.gz
          tar -xf deck.tar.gz -C /tmp
          sudo cp /tmp/deck /usr/local/bin/
          deck version
      - name: Deploy-and-Test - Deploy Products API service
        run: |
           docker compose -f chapter9/compose-api-service.yaml up -d
      - name: Deploy-and-Test - Reconcile API gateway state
        run: |
          deck validate --state chapter9/kong.yml
          deck sync --state chapter9/kong.yaml --kong-addr http://localhost:8001
      - name: Deploy-and-Test - Run API conformance tests
        run: |
          cd chapter8
          ./run_integrationtest.sh
      - name: Deploy-and-Test - Mark API definition as passing API conformance testing
        env:
          LATEST_API_VERSION: ${{ needs.build.outputs.LATEST_ARTIFACT_VERSION }}
        run: |
          curl -X PUT \
          http://localhost:9090/apis/registry/v2/groups/acmeapis/artifacts/productsapi/versions/$LATEST_API_VERSION/meta \
          --header "Content-Type: application/json" \
          --data '{"labels": ["passed-conformance-test"] }' \
          --fail-with-body
